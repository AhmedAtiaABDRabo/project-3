version: 2.1
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
            
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm run build
             
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build


  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: test front-end
          command: |
            cd frontend
            npm install
            npm run test
            
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end test
          command: |
             cd backend
             npm install
             npm run test
             
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build           
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: scan front-end
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
            
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end scan
          command: |
             cd backend
             npm install
             npm audit fix --audit-level=critical --force
             npm audit fix --audit-level=critical --force
             npm audit --audit-level=critical
             
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build     


  deploy-infrastructure:
   
    docker:
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: send workflow info to online storage
          command: |
            OldWorkflowID=$(aws cloudformation \
                                  list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                                  --no-paginate --output text)
            
            curl https://kvdb.io/HFtn5WjraQFJn1Gm8WShr9/oldid_${CIRCLE_WORKFLOW_ID:0:7}  -d ${OldWorkflowID}
            
            STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                    --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
            echo stacks: "${STACKS[@]}"
            if [[ "${STACKS}"  != "" ]]
            then
              curl https://kvdb.io/HFtn5WjraQFJn1Gm8WShr9/oldstacks_${CIRCLE_WORKFLOW_ID:0:7}  -d ${STACKS}
            else
              curl https://kvdb.io/HFtn5WjraQFJn1Gm8WShr9/oldstacks_${CIRCLE_WORKFLOW_ID:0:7}  -d '0'
            fi
            
      - run:
          name: install tar gzip
          command: |
            yum update -y
            yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
                --template-file .circleci/files/backend.yml \
                --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
                --tags project=udapeople
      - run:
          name: Ensure front-end infrastructure exist
          command: | 
            aws cloudformation deploy \
                --template-file .circleci/files/frontend.yml \
                --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
                --tags project=udapeople
      
      
      - run:
          name: Add back-end ip to inventory file
          command: | 
            aws ec2 describe-instances \
              --query "Reservations[*].Instances[*].PublicIpAddress[]" \
              --filters "Name=tag:project,Values=udapeople" \
              --output text >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure   
     # - destroy-environment  

  configure-infrastructure:
    
    docker:
      - image: circleci/python:3.6.2
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "81:4b:81:4a:95:53:62:ba:c7:eb:f8:c6:62:97:94:a1"
      
      - run:
          name: Install dependencies
          command: |
            sudo apt update
            sudo python3 -m pip install -U pip
            sudo python -m pip install ansible
            sudo apt install software-properties-common --force-yes
            sudo apt install tar gzip --yes
            sudo apt install awscli --yes
      
      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: ~/
      - run:
          name: Configure server
          command: |
            pwd
            cat ~/project/.circleci/ansible/inventory.txt
            cd .circleci/ansible
            ansible-playbook -i "/home/circleci/project/.circleci/ansible/inventory.txt" configure-server.yml
      # Here's where you will add some code to rollback on failure     
     # - destroy-environment  
  run-migrations:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - run:
          name: Install aws dependencies
          command: |
            sudo apt update 
            sudo apt install awscli --yes
           
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run build
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
      - run:
          name: Send migration results to memstash
          command: |
            if grep -q "has been executed successfully" ~/project/backend/migrations_dump.txt
            then
              # If you are using kvdb.io, generate the bucket ID "HFtn5WjraQFJn1Gm8WShr9" in your local terminal first
              curl https://kvdb.io/HFtn5WjraQFJn1Gm8WShr9/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
              
            else
              curl https://kvdb.io/HFtn5WjraQFJn1Gm8WShr9/migration_${CIRCLE_WORKFLOW_ID:0:7} -d '0'
             
            fi
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      #- destroy-environment 

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]   
      - configure-infrastructure:
          requires: [deploy-infrastructure]        
      - run-migrations:
          requires: [configure-infrastructure]